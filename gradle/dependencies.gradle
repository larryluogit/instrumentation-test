def groovyVer = "2.5.11"
def spockGroovyVer = groovyVer.replaceAll(/\.\d+$/, '')

// this is only needed for the working against unreleased otel-java snapshots
configurations.all {
  resolutionStrategy.cacheChangingModulesFor 12, 'hours'
}

ext {
  versions = [
    opentelemetry     : '1.2.0',
    opentelemetryAlpha: "1.2.0-alpha",

    slf4j             : "1.7.30",
    guava             : "30.1-jre",

    spock             : "1.3-groovy-$spockGroovyVer",
    groovy            : groovyVer,
    logback           : "1.2.3",
    bytebuddy         : "1.10.18", // Also explicitly specified in buildSrc
    scala             : "2.11.12",
    kotlin            : "1.4.0",
    coroutines        : "1.3.0",
    springboot        : "2.3.1.RELEASE",
    junit5            : "5.7.1",
    checkerFramework  : "3.6.1",
    errorprone        : "2.4.0",
    nullaway          : "0.8.0",
    autoValue         : "1.7.4",
    systemLambda      : "1.1.0",
    prometheus        : "0.9.0",
    assertj           : '3.19.0',
    awaitility        : '4.0.3',
    mockito           : '3.6.0',
    // Caffeine 2.x to support Java 8+. 3.x is 11+.
    caffeine          : '2.9.0',
    testcontainers    : '1.15.2',
    weaklockfree      : '0.18'
  ]

  deps = [
    // OpenTelemetry
    opentelemetryApi             : "io.opentelemetry:opentelemetry-api:${versions.opentelemetry}",
    opentelemetryApiMetrics      : "io.opentelemetry:opentelemetry-api-metrics:${versions.opentelemetryAlpha}",
    opentelemetryExtAnnotations  : "io.opentelemetry:opentelemetry-extension-annotations:${versions.opentelemetry}",
    opentelemetryExtAws          : "io.opentelemetry:opentelemetry-extension-aws:${versions.opentelemetry}",
    opentelemetryContext         : "io.opentelemetry:opentelemetry-context:${versions.opentelemetry}",
    opentelemetryKotlin          : "io.opentelemetry:opentelemetry-extension-kotlin:${versions.opentelemetry}",
    opentelemetryLogging         : "io.opentelemetry:opentelemetry-exporter-logging:${versions.opentelemetry}",
    opentelemetryTraceProps      : "io.opentelemetry:opentelemetry-extension-trace-propagators:${versions.opentelemetry}",
    opentelemetrySdk             : "io.opentelemetry:opentelemetry-sdk:${versions.opentelemetry}",
    opentelemetrySdkAutoconfigure: "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:${versions.opentelemetryAlpha}",
    opentelemetrySdkMetrics      : "io.opentelemetry:opentelemetry-sdk-metrics:${versions.opentelemetryAlpha}",
    opentelemetryJaeger          : "io.opentelemetry:opentelemetry-exporter-jaeger:${versions.opentelemetry}",
    opentelemetryOtlp            : "io.opentelemetry:opentelemetry-exporter-otlp:${versions.opentelemetry}",
    opentelemetryOtlpMetrics     : "io.opentelemetry:opentelemetry-exporter-otlp-metrics:${versions.opentelemetryAlpha}",
    opentelemetryZipkin          : "io.opentelemetry:opentelemetry-exporter-zipkin:${versions.opentelemetry}",
    opentelemetryPrometheus      : "io.opentelemetry:opentelemetry-exporter-prometheus:${versions.opentelemetryAlpha}",
    opentelemetryLogging         : "io.opentelemetry:opentelemetry-exporter-logging:${versions.opentelemetry}",
    opentelemetryProto           : "io.opentelemetry:opentelemetry-proto:${versions.opentelemetryAlpha}",
    opentelemetryResources       : "io.opentelemetry:opentelemetry-sdk-extension-resources:${versions.opentelemetry}",
    opentelemetrySdkTesting      : "io.opentelemetry:opentelemetry-sdk-testing:${versions.opentelemetry}",
    opentelemetrySemConv         : "io.opentelemetry:opentelemetry-semconv:${versions.opentelemetryAlpha}",

    // General
    slf4j                        : "org.slf4j:slf4j-api:${versions.slf4j}",
    guava                        : "com.google.guava:guava:$versions.guava",
    bytebuddy                    : "net.bytebuddy:byte-buddy:${versions.bytebuddy}",
    bytebuddyagent               : "net.bytebuddy:byte-buddy-agent:${versions.bytebuddy}",
    autoservice                  : [
      "com.google.auto.service:auto-service:1.0-rc7",
      "com.google.auto:auto-common:0.8",
    ],
    autoValueAnnotations         : "com.google.auto.value:auto-value-annotations:${versions.autoValue}",
    // annotation processor
    autoValue                    : "com.google.auto.value:auto-value:${versions.autoValue}",
    prometheus                   : [
      "io.prometheus:simpleclient:${versions.prometheus}",
      "io.prometheus:simpleclient_httpserver:${versions.prometheus}",
    ],
    caffeine                     : "com.github.ben-manes.caffeine:caffeine:${versions.caffeine}",
    weaklockfree                 : "com.blogspot.mydailyjava:weak-lock-free:${versions.weaklockfree}",

    // Testing

    spock                        : [
      dependencies.create("org.spockframework:spock-core:${versions.spock}", {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
      }),
      // Used by Spock for mocking:
      "org.objenesis:objenesis:3.1"
    ],
    groovy                       : "org.codehaus.groovy:groovy-all:${versions.groovy}",
    systemLambda                 : "com.github.stefanbirkner:system-lambda:${versions.systemLambda}",
    testcontainers               : "org.testcontainers:testcontainers:${versions.testcontainers}",
    testLogging                  : [
      "ch.qos.logback:logback-classic:${versions.logback}",
      "org.slf4j:log4j-over-slf4j:${versions.slf4j}",
      "org.slf4j:jcl-over-slf4j:${versions.slf4j}",
      "org.slf4j:jul-to-slf4j:${versions.slf4j}",
    ],
    scala                        : "org.scala-lang:scala-library:${versions.scala}",
    kotlin                       : "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
    coroutines                   : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}",
    junitApi                     : "org.junit.jupiter:junit-jupiter-api:${versions.junit5}",
    assertj                      : "org.assertj:assertj-core:${versions.assertj}",
    awaitility                   : "org.awaitility:awaitility:${versions.awaitility}",
    mockito                      : [
      "org.mockito:mockito-core:${versions.mockito}",
      "org.mockito:mockito-junit-jupiter:${versions.mockito}"
    ]
  ]
}
