def groovyVer = "2.5.11"
def spockGroovyVer = groovyVer.replaceAll(/\.\d+$/, '')

// this is only needed for the working against unreleased otel-java snapshots
configurations.all {
  resolutionStrategy.cacheChangingModulesFor 12, 'hours'
}

ext {
  versions = [
    opentelemetry       : '0.13.1',
    opentelemetryAlpha  : "0.13.1-alpha",

    slf4j               : "1.7.30",
    guava               : "20.0", // Last version to support Java 7

    spock               : "1.3-groovy-$spockGroovyVer",
    groovy              : groovyVer,
    logback             : "1.2.3",
    bytebuddy           : "1.10.18", // Also explicitly specified in buildSrc
    scala               : "2.11.12",  // Last version to support Java 7 (2.12+ require Java 8+)
    kotlin              : "1.4.0",
    coroutines          : "1.3.0",
    springboot          : "2.3.1.RELEASE",
    // TODO(anuraaga): Switch off of milestones, this version fixes compatibility with Spock Unroll
    junit5              : "5.7.0-M1",
    checkerFramework    : "3.6.1",
    errorprone          : "2.4.0",
    nullaway            : "0.8.0",
    autoValue           : "1.7.4",
    systemLambda        : "1.1.0",
    prometheus          : "0.9.0"
  ]

  deps = [
    // OpenTelemetry
    opentelemetryApi           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-api', version: versions.opentelemetry),
    opentelemetryExtAnnotations: dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-annotations', version: versions.opentelemetry),
    opentelemetryContext       : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-context', version: versions.opentelemetry),
    opentelemetryKotlin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-kotlin', version: versions.opentelemetry),
    opentelemetryTraceProps    : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-trace-propagators', version: versions.opentelemetry),
    opentelemetrySdk           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk', version: versions.opentelemetry),
    opentelemetryJaeger        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger', version: versions.opentelemetry),
    opentelemetryJaegerThrift  : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger-thrift', version: versions.opentelemetry),
    opentelemetryOtlp          : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-otlp', version: versions.opentelemetry),
    opentelemetryOtlpMetrics   : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-otlp-metrics', version: versions.opentelemetryAlpha),
    opentelemetryZipkin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-zipkin', version: versions.opentelemetry),
    opentelemetryPrometheus    : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-prometheus', version: versions.opentelemetry),
    opentelemetryLogging       : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-logging', version: versions.opentelemetry),
    opentelemetryProto         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-proto', version: versions.opentelemetry),
    opentelemetryResources     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk-extension-resources', version: versions.opentelemetry),

    // General
    slf4j                      : "org.slf4j:slf4j-api:${versions.slf4j}",
    guava                      : "com.google.guava:guava:$versions.guava",
    bytebuddy                  : dependencies.create(group: 'net.bytebuddy', name: 'byte-buddy', version: "${versions.bytebuddy}"),
    bytebuddyagent             : dependencies.create(group: 'net.bytebuddy', name: 'byte-buddy-agent', version: "${versions.bytebuddy}"),
    autoservice                : [
      dependencies.create(group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc3'),
      dependencies.create(group: 'com.google.auto', name: 'auto-common', version: '0.8'),
      // These are the last versions that support guava 20.0.  Upgrading has odd interactions with shadow.
      dependencies.create(group: 'com.google.guava', name: 'guava', version: "${versions.guava}"),
    ],
    autoValueAnnotations       : "com.google.auto.value:auto-value-annotations:${versions.autoValue}",
    // annotation processor
    autoValue                  : "com.google.auto.value:auto-value:${versions.autoValue}",
    prometheus                 : [
      dependencies.create(group: 'io.prometheus', name: 'simpleclient', version: "${versions.prometheus}"),
      dependencies.create(group: 'io.prometheus', name: 'simpleclient_httpserver', version: "${versions.prometheus}"),
    ],

    // Testing

    spock                      : [
      dependencies.create("org.spockframework:spock-core:${versions.spock}", {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
      }),
      // Used by Spock for mocking:
      dependencies.create(group: 'org.objenesis', name: 'objenesis', version: '3.1')
    ],
    groovy                     : "org.codehaus.groovy:groovy-all:${versions.groovy}",
    systemLambda               : "com.github.stefanbirkner:system-lambda:${versions.systemLambda}",
    testcontainers             : "org.testcontainers:testcontainers:1.15.0-rc2",
    testLogging                : [
      dependencies.create(group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback),
      dependencies.create(group: 'org.slf4j', name: 'log4j-over-slf4j', version: versions.slf4j),
      dependencies.create(group: 'org.slf4j', name: 'jcl-over-slf4j', version: versions.slf4j),
      dependencies.create(group: 'org.slf4j', name: 'jul-to-slf4j', version: versions.slf4j),
    ],
    scala                      : dependencies.create(group: 'org.scala-lang', name: 'scala-library', version: "${versions.scala}"),
    kotlin                     : dependencies.create(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: "${versions.kotlin}"),
    coroutines                 : dependencies.create(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: "${versions.coroutines}"),
  ]
}
