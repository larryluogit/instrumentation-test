// this project will run in isolation under the agent's classloader
buildscript {

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "net.bytebuddy:byte-buddy-gradle-plugin:${versions.bytebuddy}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
  }
}
plugins {
  id "com.github.johnrengelman.shadow"
}
apply from: "${rootDir}/gradle/java.gradle"

Project instr_project = project
subprojects { Project subProj ->
  apply plugin: "net.bytebuddy.byte-buddy"
  apply plugin: 'muzzle'

  subProj.byteBuddy {
    transformation {
      // Applying NoOp optimizes build by applying bytebuddy plugin to only compileJava task
      tasks = ['compileJava', 'compileScala', 'compileKotlin']
      plugin = 'io.opentelemetry.auto.tooling.muzzle.MuzzleGradlePlugin$NoOp'
    }
  }

  subProj.afterEvaluate {
    subProj.byteBuddy {
      transformation {
        tasks = ['compileJava', 'compileScala', 'compileKotlin']
        plugin = 'io.opentelemetry.auto.tooling.muzzle.MuzzleGradlePlugin'
        classPath = project(':auto-tooling').configurations.instrumentationMuzzle + subProj.configurations.compile + subProj.sourceSets.main.output
      }
    }

    String jdkCompile = null
    if (project.hasProperty('minJavaVersionForTests') && project.getProperty('minJavaVersionForTests') != JavaVersion.VERSION_1_7) {
      def version = JavaVersion.toVersion(project.getProperty('minJavaVersionForTests'))
      def name = "java$version.majorVersion"
      jdkCompile = "main_${name}Compile"
    }
    dependencies {
      // Apply common dependencies for instrumentation.
      compile(project(':auto-tooling')) {
        // OpenTelemetry SDK is not needed for compilation, and :opentelemetry-sdk-shaded-for-testing
        // is brought in for tests by project(:testing) below
        exclude group: 'io.opentelemetry', module: 'opentelemetry-sdk'
      }
      compile deps.bytebuddy
      if (jdkCompile) {
        "$jdkCompile"(project(':auto-tooling')) {
          // OpenTelemetry SDK is not needed for compilation, and :opentelemetry-sdk-shaded-for-testing
          // is brought in for tests by project(:testing) below
          exclude group: 'io.opentelemetry', module: 'opentelemetry-sdk'
        }
        "$jdkCompile" deps.bytebuddy
      }
      annotationProcessor deps.autoservice
      implementation deps.autoservice

      testCompile project(':testing')
      testAnnotationProcessor deps.autoservice
      testImplementation deps.autoservice
    }

    // Make it so all instrumentation subproject tests can be run with a single command.
    instr_project.tasks.test.dependsOn(subProj.tasks.test)
  }

  instr_project.dependencies {
    compile(project(subProj.getPath()))
  }
}

dependencies {
  compile(project(':auto-tooling')) {
    exclude module: ':auto-bootstrap'
  }

  // TODO: including the jaeger exporter doubles the agent jar file size, would be better for it to be optional component
  // (but this can wait until after 0.1.0)
  compile group: 'io.opentelemetry', name: 'opentelemetry-exporters-jaeger', version: versions.opentelemetry
  compile group: 'io.grpc', name: 'grpc-netty', version: '1.24.0'
}

configurations {
  // exclude bootstrap dependencies from shadowJar
  runtime.exclude module: deps.slf4j
  runtime.exclude group: 'org.slf4j'
  runtime.exclude group: 'io.opentelemetry', module: 'opentelemetry-api'
}

// need to perform shading in two steps in order to avoid shading java.util.logging.Logger
// in the java-util-logging-events instrumentation since that instrumentation needs to
// reference unshaded java.util.logging.Logger
// (java.util.logging.Logger shading is not needed in any of the instrumentation modules,
// but it is needed for the dependencies, e.g. guava, which use java.util.logging.Logger)
task shadowJarStep1(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {

  archiveClassifier = 'step1'
  destinationDirectory = file("${project.buildDir}/step1")

  configurations = [project.configurations.runtime]

  dependencies {
    exclude(project(':instrumentation:java-util-logging-events'))
  }

  // rewrite dependencies calling Logger.getLogger
  relocate 'java.util.logging.Logger', 'io.opentelemetry.auto.bootstrap.PatchLogger'
}

shadowJar {

  dependsOn shadowJarStep1

  from {
    zipTree(shadowJarStep1.archiveFile)
  }

  mergeServiceFiles()

  exclude '**/module-info.class'

  dependencies {
    exclude(dependency("org.projectlombok:lombok:$versions.lombok"))
  }

  // Prevents conflict with other SLF4J instances. Important for premain.
  relocate 'org.slf4j', 'io.opentelemetry.auto.slf4j'

  dependencies {
    exclude(project(':auto-bootstrap'))
  }

  // relocate OpenTelemetry API usage
  relocate "io.opentelemetry.OpenTelemetry", "io.opentelemetry.auto.shaded.io.opentelemetry.OpenTelemetry"
  relocate "io.opentelemetry.context", "io.opentelemetry.auto.shaded.io.opentelemetry.context"
  relocate "io.opentelemetry.distributedcontext", "io.opentelemetry.auto.shaded.io.opentelemetry.distributedcontext"
  relocate "io.opentelemetry.internal", "io.opentelemetry.auto.shaded.io.opentelemetry.internal"
  relocate "io.opentelemetry.metrics", "io.opentelemetry.auto.shaded.io.opentelemetry.metrics"
  relocate "io.opentelemetry.trace", "io.opentelemetry.auto.shaded.io.opentelemetry.trace"
}

