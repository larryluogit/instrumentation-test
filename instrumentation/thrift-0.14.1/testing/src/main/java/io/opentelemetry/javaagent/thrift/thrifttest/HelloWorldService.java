/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */

package io.opentelemetry.javaagent.thrift.thrifttest;

@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.18.1)",
    date = "2023-05-08")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class HelloWorldService {

  public interface Iface {

    public java.lang.String sayHello(java.lang.String zone, java.lang.String name)
        throws org.apache.thrift.TException;

    public java.lang.String withDelay(int delay) throws org.apache.thrift.TException;

    public java.lang.String withoutArgs() throws org.apache.thrift.TException;

    public java.lang.String withError() throws org.apache.thrift.TException;

    public java.lang.String withCollisioin(java.lang.String input)
        throws org.apache.thrift.TException;

    public void oneWay() throws org.apache.thrift.TException;

    public void oneWayWithError() throws org.apache.thrift.TException;

    public UserAccount data(User user, Account account) throws org.apache.thrift.TException;
  }

  public interface AsyncIface {

    public void sayHello(
        java.lang.String zone,
        java.lang.String name,
        org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
        throws org.apache.thrift.TException;

    public void withDelay(
        int delay, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
        throws org.apache.thrift.TException;

    public void withoutArgs(
        org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
        throws org.apache.thrift.TException;

    public void withError(
        org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
        throws org.apache.thrift.TException;

    public void withCollisioin(
        java.lang.String input,
        org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
        throws org.apache.thrift.TException;

    public void oneWay(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException;

    public void oneWayWithError(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException;

    public void data(
        User user,
        Account account,
        org.apache.thrift.async.AsyncMethodCallback<UserAccount> resultHandler)
        throws org.apache.thrift.TException;
  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}

      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }

      @Override
      public Client getClient(
          org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot) {
      super(prot, prot);
    }

    public Client(
        org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public java.lang.String sayHello(java.lang.String zone, java.lang.String name)
        throws org.apache.thrift.TException {
      send_sayHello(zone, name);
      return recv_sayHello();
    }

    public void send_sayHello(java.lang.String zone, java.lang.String name)
        throws org.apache.thrift.TException {
      SayHelloArgs args = new SayHelloArgs();
      args.setZone(zone);
      args.setName(name);
      sendBase("sayHello", args);
    }

    public java.lang.String recv_sayHello() throws org.apache.thrift.TException {
      SayHelloResult result = new SayHelloResult();
      receiveBase(result, "sayHello");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "sayHello failed: unknown result");
    }

    @Override
    public java.lang.String withDelay(int delay) throws org.apache.thrift.TException {
      send_withDelay(delay);
      return recv_withDelay();
    }

    public void send_withDelay(int delay) throws org.apache.thrift.TException {
      WithDelayArgs args = new WithDelayArgs();
      args.setDelay(delay);
      sendBase("withDelay", args);
    }

    public java.lang.String recv_withDelay() throws org.apache.thrift.TException {
      WithDelayResult result = new WithDelayResult();
      receiveBase(result, "withDelay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "withDelay failed: unknown result");
    }

    @Override
    public java.lang.String withoutArgs() throws org.apache.thrift.TException {
      send_withoutArgs();
      return recv_withoutArgs();
    }

    public void send_withoutArgs() throws org.apache.thrift.TException {
      WithoutArgsArgs args = new WithoutArgsArgs();
      sendBase("withoutArgs", args);
    }

    public java.lang.String recv_withoutArgs() throws org.apache.thrift.TException {
      WithoutArgsResult result = new WithoutArgsResult();
      receiveBase(result, "withoutArgs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "withoutArgs failed: unknown result");
    }

    @Override
    public java.lang.String withError() throws org.apache.thrift.TException {
      send_withError();
      return recv_withError();
    }

    public void send_withError() throws org.apache.thrift.TException {
      WithErrorArgs args = new WithErrorArgs();
      sendBase("withError", args);
    }

    public java.lang.String recv_withError() throws org.apache.thrift.TException {
      WithErrorResult result = new WithErrorResult();
      receiveBase(result, "withError");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "withError failed: unknown result");
    }

    @Override
    public java.lang.String withCollisioin(java.lang.String input)
        throws org.apache.thrift.TException {
      send_withCollisioin(input);
      return recv_withCollisioin();
    }

    public void send_withCollisioin(java.lang.String input) throws org.apache.thrift.TException {
      WithCollisioinArgs args = new WithCollisioinArgs();
      args.setInput(input);
      sendBase("withCollisioin", args);
    }

    public java.lang.String recv_withCollisioin() throws org.apache.thrift.TException {
      WithCollisioinResult result = new WithCollisioinResult();
      receiveBase(result, "withCollisioin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "withCollisioin failed: unknown result");
    }

    @Override
    public void oneWay() throws org.apache.thrift.TException {
      send_oneWay();
    }

    public void send_oneWay() throws org.apache.thrift.TException {
      OneWayArgs args = new OneWayArgs();
      sendBaseOneway("oneWay", args);
    }

    @Override
    public void oneWayWithError() throws org.apache.thrift.TException {
      send_oneWayWithError();
    }

    public void send_oneWayWithError() throws org.apache.thrift.TException {
      OneWayWithErrorArgs args = new OneWayWithErrorArgs();
      sendBaseOneway("oneWayWithError", args);
    }

    @Override
    public UserAccount data(User user, Account account) throws org.apache.thrift.TException {
      send_data(user, account);
      return recv_data();
    }

    public void send_data(User user, Account account) throws org.apache.thrift.TException {
      DataArgs args = new DataArgs();
      args.setUser(user);
      args.setAccount(account);
      sendBase("data", args);
    }

    public UserAccount recv_data() throws org.apache.thrift.TException {
      DataResult result = new DataResult();
      receiveBase(result, "data");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT, "data failed: unknown result");
    }
  }

  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient
      implements AsyncIface {
    public static class Factory
        implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

      public Factory(
          org.apache.thrift.async.TAsyncClientManager clientManager,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }

      @Override
      public AsyncClient getAsyncClient(
          org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(
        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
        org.apache.thrift.async.TAsyncClientManager clientManager,
        org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void sayHello(
        java.lang.String zone,
        java.lang.String name,
        org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      SayHelloCall methodCall =
          new SayHelloCall(zone, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = methodCall;
      ___manager.call(methodCall);
    }

    public static class SayHelloCall
        extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String zone;
      private java.lang.String name;

      public SayHelloCall(
          java.lang.String zone,
          java.lang.String name,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zone = zone;
        this.name = name;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "sayHello", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SayHelloArgs args = new SayHelloArgs();
        args.setZone(zone);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sayHello();
      }
    }

    @Override
    public void withDelay(
        int delay, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      WithDelayCall methodCall =
          new WithDelayCall(delay, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = methodCall;
      ___manager.call(methodCall);
    }

    public static class WithDelayCall
        extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private int delay;

      public WithDelayCall(
          int delay,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.delay = delay;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "withDelay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        WithDelayArgs args = new WithDelayArgs();
        args.setDelay(delay);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_withDelay();
      }
    }

    @Override
    public void withoutArgs(
        org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      WithoutArgsCall methodCall =
          new WithoutArgsCall(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = methodCall;
      ___manager.call(methodCall);
    }

    public static class WithoutArgsCall
        extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public WithoutArgsCall(
          org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "withoutArgs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        WithoutArgsArgs args = new WithoutArgsArgs();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_withoutArgs();
      }
    }

    @Override
    public void withError(
        org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      WithErrorCall methodCall =
          new WithErrorCall(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = methodCall;
      ___manager.call(methodCall);
    }

    public static class WithErrorCall
        extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public WithErrorCall(
          org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "withError", org.apache.thrift.protocol.TMessageType.CALL, 0));
        WithErrorArgs args = new WithErrorArgs();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_withError();
      }
    }

    @Override
    public void withCollisioin(
        java.lang.String input,
        org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      WithCollisioinCall methodCall =
          new WithCollisioinCall(input, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = methodCall;
      ___manager.call(methodCall);
    }

    public static class WithCollisioinCall
        extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String input;

      public WithCollisioinCall(
          java.lang.String input,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.input = input;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "withCollisioin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        WithCollisioinArgs args = new WithCollisioinArgs();
        args.setInput(input);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_withCollisioin();
      }
    }

    @Override
    public void oneWay(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      OneWayCall methodCall = new OneWayCall(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = methodCall;
      ___manager.call(methodCall);
    }

    public static class OneWayCall extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public OneWayCall(
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "oneWay", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        OneWayArgs args = new OneWayArgs();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void oneWayWithError(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      OneWayWithErrorCall methodCall =
          new OneWayWithErrorCall(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = methodCall;
      ___manager.call(methodCall);
    }

    public static class OneWayWithErrorCall extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public OneWayWithErrorCall(
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "oneWayWithError", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        OneWayWithErrorArgs args = new OneWayWithErrorArgs();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void data(
        User user,
        Account account,
        org.apache.thrift.async.AsyncMethodCallback<UserAccount> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      DataCall dataCall =
          new DataCall(user, account, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = dataCall;
      ___manager.call(dataCall);
    }

    public static class DataCall extends org.apache.thrift.async.TAsyncMethodCall<UserAccount> {
      private User user;
      private Account account;

      public DataCall(
          User user,
          Account account,
          org.apache.thrift.async.AsyncMethodCallback<UserAccount> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.account = account;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "data", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DataArgs args = new DataArgs();
        args.setUser(user);
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public UserAccount getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_data();
      }
    }
  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
      implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER =
        org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

    public Processor(I iface) {
      super(
          iface,
          getProcessMap(
              new java.util.HashMap<
                  java.lang.String,
                  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(
        I iface,
        java.util.Map<
                java.lang.String,
                org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
            processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface>
        java.util.Map<
                java.lang.String,
                org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
            getProcessMap(
                java.util.Map<
                        java.lang.String,
                        org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
                    processMap) {
      processMap.put("sayHello", new SayHello());
      processMap.put("withDelay", new WithDelay());
      processMap.put("withoutArgs", new WithoutArgs());
      processMap.put("withError", new WithError());
      processMap.put("withCollisioin", new WithCollisioin());
      processMap.put("oneWay", new OneWay());
      processMap.put("oneWayWithError", new OneWayWithError());
      processMap.put("data", new Data());
      return processMap;
    }

    public static class SayHello<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, SayHelloArgs> {
      public SayHello() {
        super("sayHello");
      }

      @Override
      public SayHelloArgs getEmptyArgsInstance() {
        return new SayHelloArgs();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public SayHelloResult getResult(I iface, SayHelloArgs args)
          throws org.apache.thrift.TException {
        SayHelloResult result = new SayHelloResult();
        result.success = iface.sayHello(args.zone, args.name);
        return result;
      }
    }

    public static class WithDelay<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, WithDelayArgs> {
      public WithDelay() {
        super("withDelay");
      }

      @Override
      public WithDelayArgs getEmptyArgsInstance() {
        return new WithDelayArgs();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public WithDelayResult getResult(I iface, WithDelayArgs args)
          throws org.apache.thrift.TException {
        WithDelayResult result = new WithDelayResult();
        result.success = iface.withDelay(args.delay);
        return result;
      }
    }

    public static class WithoutArgs<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, WithoutArgsArgs> {
      public WithoutArgs() {
        super("withoutArgs");
      }

      @Override
      public WithoutArgsArgs getEmptyArgsInstance() {
        return new WithoutArgsArgs();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public WithoutArgsResult getResult(I iface, WithoutArgsArgs args)
          throws org.apache.thrift.TException {
        WithoutArgsResult result = new WithoutArgsResult();
        result.success = iface.withoutArgs();
        return result;
      }
    }

    public static class WithError<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, WithErrorArgs> {
      public WithError() {
        super("withError");
      }

      @Override
      public WithErrorArgs getEmptyArgsInstance() {
        return new WithErrorArgs();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public WithErrorResult getResult(I iface, WithErrorArgs args)
          throws org.apache.thrift.TException {
        WithErrorResult result = new WithErrorResult();
        result.success = iface.withError();
        return result;
      }
    }

    public static class WithCollisioin<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, WithCollisioinArgs> {
      public WithCollisioin() {
        super("withCollisioin");
      }

      @Override
      public WithCollisioinArgs getEmptyArgsInstance() {
        return new WithCollisioinArgs();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public WithCollisioinResult getResult(I iface, WithCollisioinArgs args)
          throws org.apache.thrift.TException {
        WithCollisioinResult result = new WithCollisioinResult();
        result.success = iface.withCollisioin(args.input);
        return result;
      }
    }

    public static class OneWay<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, OneWayArgs> {
      public OneWay() {
        super("oneWay");
      }

      @Override
      public OneWayArgs getEmptyArgsInstance() {
        return new OneWayArgs();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, OneWayArgs args)
          throws org.apache.thrift.TException {
        iface.oneWay();
        return null;
      }
    }

    public static class OneWayWithError<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, OneWayWithErrorArgs> {
      public OneWayWithError() {
        super("oneWayWithError");
      }

      @Override
      public OneWayWithErrorArgs getEmptyArgsInstance() {
        return new OneWayWithErrorArgs();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, OneWayWithErrorArgs args)
          throws org.apache.thrift.TException {
        iface.oneWayWithError();
        return null;
      }
    }

    public static class Data<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, DataArgs> {
      public Data() {
        super("data");
      }

      @Override
      public DataArgs getEmptyArgsInstance() {
        return new DataArgs();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public DataResult getResult(I iface, DataArgs args) throws org.apache.thrift.TException {
        DataResult result = new DataResult();
        result.success = iface.data(args.user, args.account);
        return result;
      }
    }
  }

  public static class AsyncProcessor<I extends AsyncIface>
      extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER =
        org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

    public AsyncProcessor(I iface) {
      super(
          iface,
          getProcessMap(
              new java.util.HashMap<
                  java.lang.String,
                  org.apache.thrift.AsyncProcessFunction<
                      I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(
        I iface,
        java.util.Map<
                java.lang.String,
                org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
            processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface>
        java.util.Map<
                java.lang.String,
                org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
            getProcessMap(
                java.util.Map<
                        java.lang.String,
                        org.apache.thrift.AsyncProcessFunction<
                            I, ? extends org.apache.thrift.TBase, ?>>
                    processMap) {
      processMap.put("sayHello", new SayHello());
      processMap.put("withDelay", new WithDelay());
      processMap.put("withoutArgs", new WithoutArgs());
      processMap.put("withError", new WithError());
      processMap.put("withCollisioin", new WithCollisioin());
      processMap.put("oneWay", new OneWay());
      processMap.put("oneWayWithError", new OneWayWithError());
      processMap.put("data", new Data());
      return processMap;
    }

    public static class SayHello<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, SayHelloArgs, java.lang.String> {
      public SayHello() {
        super("sayHello");
      }

      @Override
      public SayHelloArgs getEmptyArgsInstance() {
        return new SayHelloArgs();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          @Override
          public void onComplete(java.lang.String o) {
            SayHelloResult result = new SayHelloResult();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            SayHelloResult result = new SayHelloResult();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(
          I iface,
          SayHelloArgs args,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
          throws org.apache.thrift.TException {
        iface.sayHello(args.zone, args.name, resultHandler);
      }
    }

    public static class WithDelay<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, WithDelayArgs, java.lang.String> {
      public WithDelay() {
        super("withDelay");
      }

      @Override
      public WithDelayArgs getEmptyArgsInstance() {
        return new WithDelayArgs();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          @Override
          public void onComplete(java.lang.String o) {
            WithDelayResult result = new WithDelayResult();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            WithDelayResult result = new WithDelayResult();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(
          I iface,
          WithDelayArgs args,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
          throws org.apache.thrift.TException {
        iface.withDelay(args.delay, resultHandler);
      }
    }

    public static class WithoutArgs<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, WithoutArgsArgs, java.lang.String> {
      public WithoutArgs() {
        super("withoutArgs");
      }

      @Override
      public WithoutArgsArgs getEmptyArgsInstance() {
        return new WithoutArgsArgs();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          @Override
          public void onComplete(java.lang.String o) {
            WithoutArgsResult result = new WithoutArgsResult();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            WithoutArgsResult result = new WithoutArgsResult();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(
          I iface,
          WithoutArgsArgs args,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
          throws org.apache.thrift.TException {
        iface.withoutArgs(resultHandler);
      }
    }

    public static class WithError<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, WithErrorArgs, java.lang.String> {
      public WithError() {
        super("withError");
      }

      @Override
      public WithErrorArgs getEmptyArgsInstance() {
        return new WithErrorArgs();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          @Override
          public void onComplete(java.lang.String o) {
            WithErrorResult result = new WithErrorResult();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            WithErrorResult result = new WithErrorResult();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(
          I iface,
          WithErrorArgs args,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
          throws org.apache.thrift.TException {
        iface.withError(resultHandler);
      }
    }

    public static class WithCollisioin<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, WithCollisioinArgs, java.lang.String> {
      public WithCollisioin() {
        super("withCollisioin");
      }

      @Override
      public WithCollisioinArgs getEmptyArgsInstance() {
        return new WithCollisioinArgs();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          @Override
          public void onComplete(java.lang.String o) {
            WithCollisioinResult result = new WithCollisioinResult();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            WithCollisioinResult result = new WithCollisioinResult();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(
          I iface,
          WithCollisioinArgs args,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler)
          throws org.apache.thrift.TException {
        iface.withCollisioin(args.input, resultHandler);
      }
    }

    public static class OneWay<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, OneWayArgs, Void> {
      public OneWay() {
        super("oneWay");
      }

      @Override
      public OneWayArgs getEmptyArgsInstance() {
        return new OneWayArgs();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          @Override
          public void onComplete(Void o) {}

          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(
          I iface, OneWayArgs args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws org.apache.thrift.TException {
        iface.oneWay(resultHandler);
      }
    }

    public static class OneWayWithError<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, OneWayWithErrorArgs, Void> {
      public OneWayWithError() {
        super("oneWayWithError");
      }

      @Override
      public OneWayWithErrorArgs getEmptyArgsInstance() {
        return new OneWayWithErrorArgs();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          @Override
          public void onComplete(Void o) {}

          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(
          I iface,
          OneWayWithErrorArgs args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws org.apache.thrift.TException {
        iface.oneWayWithError(resultHandler);
      }
    }

    public static class Data<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, DataArgs, UserAccount> {
      public Data() {
        super("data");
      }

      @Override
      public DataArgs getEmptyArgsInstance() {
        return new DataArgs();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<UserAccount> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<UserAccount>() {
          @Override
          public void onComplete(UserAccount o) {
            DataResult result = new DataResult();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DataResult result = new DataResult();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(
          I iface,
          DataArgs args,
          org.apache.thrift.async.AsyncMethodCallback<UserAccount> resultHandler)
          throws org.apache.thrift.TException {
        iface.data(args.user, args.account, resultHandler);
      }
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class SayHelloArgs
      implements org.apache.thrift.TBase<SayHelloArgs, SayHelloArgs.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<SayHelloArgs> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("sayHello_args");

    private static final org.apache.thrift.protocol.TField ZONE_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "zone", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "name", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new SayHelloArgsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new SayHelloArgsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String zone; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      ZONE((short) 1, "zone"),
      NAME((short) 2, "name");

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // ZONE
            return ZONE;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      tmpMap.put(
          Fields.ZONE,
          new org.apache.thrift.meta_data.FieldMetaData(
              "zone",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(
          Fields.NAME,
          new org.apache.thrift.meta_data.FieldMetaData(
              "name",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          SayHelloArgs.class, metaDataMap);
    }

    public SayHelloArgs() {}

    public SayHelloArgs(java.lang.String zone, java.lang.String name) {
      this();
      this.zone = zone;
      this.name = name;
    }

    /** Performs a deep copy on <i>other</i>. */
    public SayHelloArgs(SayHelloArgs other) {
      if (other.isSetZone()) {
        this.zone = other.zone;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public SayHelloArgs deepCopy() {
      return new SayHelloArgs(this);
    }

    @Override
    public void clear() {
      this.zone = null;
      this.name = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getZone() {
      return this.zone;
    }

    public SayHelloArgs setZone(@org.apache.thrift.annotation.Nullable java.lang.String zone) {
      this.zone = zone;
      return this;
    }

    public void unsetZone() {
      this.zone = null;
    }

    /** Returns true if field zone is set (has been assigned a value) and false otherwise */
    public boolean isSetZone() {
      return this.zone != null;
    }

    public void setZoneIsSet(boolean value) {
      if (!value) {
        this.zone = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public SayHelloArgs setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case ZONE:
          if (value == null) {
            unsetZone();
          } else {
            setZone((java.lang.String) value);
          }
          break;

        case NAME:
          if (value == null) {
            unsetName();
          } else {
            setName((java.lang.String) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      switch (field) {
        case ZONE:
          return getZone();

        case NAME:
          return getName();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case ZONE:
          return isSetZone();
        case NAME:
          return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof SayHelloArgs) {
        return this.equals((SayHelloArgs) that);
      }
      return false;
    }

    public boolean equals(SayHelloArgs that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      boolean thisPresentZone = true && this.isSetZone();
      boolean thatPresentZone = true && that.isSetZone();
      if (thisPresentZone || thatPresentZone) {
        if (!(thisPresentZone && thatPresentZone)) {
          return false;
        }
        if (!this.zone.equals(that.zone)) {
          return false;
        }
      }

      boolean thisPresentName = true && this.isSetName();
      boolean thatPresentName = true && that.isSetName();
      if (thisPresentName || thatPresentName) {
        if (!(thisPresentName && thatPresentName)) {
          return false;
        }
        if (!this.name.equals(that.name)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZone()) ? 131071 : 524287);
      if (isSetZone()) {
        hashCode = hashCode * 8191 + zone.hashCode();
      }

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName()) {
        hashCode = hashCode * 8191 + name.hashCode();
      }

      return hashCode;
    }

    @Override
    public int compareTo(SayHelloArgs other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetZone(), other.isSetZone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zone, other.zone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sayHello_args(");
      boolean first = true;

      sb.append("zone:");
      if (this.zone == null) {
        sb.append("null");
      } else {
        sb.append(this.zone);
      }
      first = false;
      if (!first) {
        sb.append(", ");
      }
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SayHelloArgsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public SayHelloArgsStandardScheme getScheme() {
        return new SayHelloArgsStandardScheme();
      }
    }

    private static class SayHelloArgsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<SayHelloArgs> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, SayHelloArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ZONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zone = iprot.readString();
                struct.setZoneIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, SayHelloArgs struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zone != null) {
          oprot.writeFieldBegin(ZONE_FIELD_DESC);
          oprot.writeString(struct.zone);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class SayHelloArgsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public SayHelloArgsTupleScheme getScheme() {
        return new SayHelloArgsTupleScheme();
      }
    }

    private static class SayHelloArgsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<SayHelloArgs> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SayHelloArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetZone()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetZone()) {
          oprot.writeString(struct.zone);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SayHelloArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.zone = iprot.readString();
          struct.setZoneIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class SayHelloResult
      implements org.apache.thrift.TBase<SayHelloResult, SayHelloResult.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<SayHelloResult> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("sayHello_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new SayHelloResultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new SayHelloResultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      tmpMap.put(
          Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          SayHelloResult.class, metaDataMap);
    }

    public SayHelloResult() {}

    public SayHelloResult(java.lang.String success) {
      this();
      this.success = success;
    }

    /** Performs a deep copy on <i>other</i>. */
    public SayHelloResult(SayHelloResult other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public SayHelloResult deepCopy() {
      return new SayHelloResult(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public SayHelloResult setSuccess(
        @org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.String) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof SayHelloResult) {
        return this.equals((SayHelloResult) that);
      }
      return false;
    }

    public boolean equals(SayHelloResult that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      boolean thisPresentSuccess = true && this.isSetSuccess();
      boolean thatPresentSuccess = true && that.isSetSuccess();
      if (thisPresentSuccess || thatPresentSuccess) {
        if (!(thisPresentSuccess && thatPresentSuccess)) {
          return false;
        }
        if (!this.success.equals(that.success)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess()) {
        hashCode = hashCode * 8191 + success.hashCode();
      }

      return hashCode;
    }

    @Override
    public int compareTo(SayHelloResult other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sayHello_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SayHelloResultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public SayHelloResultStandardScheme getScheme() {
        return new SayHelloResultStandardScheme();
      }
    }

    private static class SayHelloResultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<SayHelloResult> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, SayHelloResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, SayHelloResult struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class SayHelloResultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public SayHelloResultTupleScheme getScheme() {
        return new SayHelloResultTupleScheme();
      }
    }

    private static class SayHelloResultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<SayHelloResult> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SayHelloResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SayHelloResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class WithDelayArgs
      implements org.apache.thrift.TBase<WithDelayArgs, WithDelayArgs.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<WithDelayArgs> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("withDelay_args");

    private static final org.apache.thrift.protocol.TField DELAY_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "delay", org.apache.thrift.protocol.TType.I32, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new WithDelayArgsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new WithDelayArgsTupleSchemeFactory();

    public int delay; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      DELAY((short) 1, "delay");

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // DELAY
            return DELAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    // isset id assignments
    private static final int __DELAY_ISSET_ID = 0;
    private byte issetBitfield = 0;
    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      tmpMap.put(
          Fields.DELAY,
          new org.apache.thrift.meta_data.FieldMetaData(
              "delay",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          WithDelayArgs.class, metaDataMap);
    }

    public WithDelayArgs() {}

    public WithDelayArgs(int delay) {
      this();
      this.delay = delay;
      setDelayIsSet(true);
    }

    /** Performs a deep copy on <i>other</i>. */
    public WithDelayArgs(WithDelayArgs other) {
      issetBitfield = other.issetBitfield;
      this.delay = other.delay;
    }

    @Override
    public WithDelayArgs deepCopy() {
      return new WithDelayArgs(this);
    }

    @Override
    public void clear() {
      setDelayIsSet(false);
      this.delay = 0;
    }

    public int getDelay() {
      return this.delay;
    }

    public WithDelayArgs setDelay(int delay) {
      this.delay = delay;
      setDelayIsSet(true);
      return this;
    }

    public void unsetDelay() {
      issetBitfield = org.apache.thrift.EncodingUtils.clearBit(issetBitfield, __DELAY_ISSET_ID);
    }

    /** Returns true if field delay is set (has been assigned a value) and false otherwise */
    public boolean isSetDelay() {
      return org.apache.thrift.EncodingUtils.testBit(issetBitfield, __DELAY_ISSET_ID);
    }

    public void setDelayIsSet(boolean value) {
      issetBitfield =
          org.apache.thrift.EncodingUtils.setBit(issetBitfield, __DELAY_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case DELAY:
          if (value == null) {
            unsetDelay();
          } else {
            setDelay((java.lang.Integer) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      switch (field) {
        case DELAY:
          return getDelay();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case DELAY:
          return isSetDelay();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof WithDelayArgs) {
        return this.equals((WithDelayArgs) that);
      }
      return false;
    }

    public boolean equals(WithDelayArgs that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      boolean thisPresentDelay = true;
      boolean thatPresentDelay = true;
      if (thisPresentDelay || thatPresentDelay) {
        if (!(thisPresentDelay && thatPresentDelay)) {
          return false;
        }
        if (this.delay != that.delay) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + delay;

      return hashCode;
    }

    @Override
    public int compareTo(WithDelayArgs other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDelay(), other.isSetDelay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delay, other.delay);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("withDelay_args(");
      boolean first = true;

      sb.append("delay:");
      sb.append(this.delay);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and
        // doesn't call the default constructor.
        issetBitfield = 0;
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WithDelayArgsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithDelayArgsStandardScheme getScheme() {
        return new WithDelayArgsStandardScheme();
      }
    }

    private static class WithDelayArgsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<WithDelayArgs> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, WithDelayArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // DELAY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.delay = iprot.readI32();
                struct.setDelayIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, WithDelayArgs struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DELAY_FIELD_DESC);
        oprot.writeI32(struct.delay);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class WithDelayArgsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithDelayArgsTupleScheme getScheme() {
        return new WithDelayArgsTupleScheme();
      }
    }

    private static class WithDelayArgsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<WithDelayArgs> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WithDelayArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDelay()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDelay()) {
          oprot.writeI32(struct.delay);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WithDelayArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.delay = iprot.readI32();
          struct.setDelayIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class WithDelayResult
      implements org.apache.thrift.TBase<WithDelayResult, WithDelayResult.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<WithDelayResult> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("withDelay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new WithDelayResultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new WithDelayResultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      tmpMap.put(
          Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          WithDelayResult.class, metaDataMap);
    }

    public WithDelayResult() {}

    public WithDelayResult(java.lang.String success) {
      this();
      this.success = success;
    }

    /** Performs a deep copy on <i>other</i>. */
    public WithDelayResult(WithDelayResult other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public WithDelayResult deepCopy() {
      return new WithDelayResult(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public WithDelayResult setSuccess(
        @org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.String) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof WithDelayResult) {
        return this.equals((WithDelayResult) that);
      }
      return false;
    }

    public boolean equals(WithDelayResult that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      boolean thisPresentSuccess = true && this.isSetSuccess();
      boolean thatPresentSuccess = true && that.isSetSuccess();
      if (thisPresentSuccess || thatPresentSuccess) {
        if (!(thisPresentSuccess && thatPresentSuccess)) {
          return false;
        }
        if (!this.success.equals(that.success)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess()) {
        hashCode = hashCode * 8191 + success.hashCode();
      }

      return hashCode;
    }

    @Override
    public int compareTo(WithDelayResult other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("withDelay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WithDelayResultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithDelayResultStandardScheme getScheme() {
        return new WithDelayResultStandardScheme();
      }
    }

    private static class WithDelayResultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<WithDelayResult> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, WithDelayResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, WithDelayResult struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class WithDelayResultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithDelayResultTupleScheme getScheme() {
        return new WithDelayResultTupleScheme();
      }
    }

    private static class WithDelayResultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<WithDelayResult> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WithDelayResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WithDelayResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class WithoutArgsArgs
      implements org.apache.thrift.TBase<WithoutArgsArgs, WithoutArgsArgs.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<WithoutArgsArgs> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("withoutArgs_args");

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new WithoutArgsArgsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new WithoutArgsArgsTupleSchemeFactory();

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          WithoutArgsArgs.class, metaDataMap);
    }

    public WithoutArgsArgs() {}

    /** Performs a deep copy on <i>other</i>. */
    public WithoutArgsArgs(WithoutArgsArgs other) {}

    @Override
    public WithoutArgsArgs deepCopy() {
      return new WithoutArgsArgs(this);
    }

    @Override
    public void clear() {}

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {}

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {

      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof WithoutArgsArgs) {
        return this.equals((WithoutArgsArgs) that);
      }
      return false;
    }

    public boolean equals(WithoutArgsArgs that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(WithoutArgsArgs other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("withoutArgs_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WithoutArgsArgsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithoutArgsArgsStandardScheme getScheme() {
        return new WithoutArgsArgsStandardScheme();
      }
    }

    private static class WithoutArgsArgsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<WithoutArgsArgs> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, WithoutArgsArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, WithoutArgsArgs struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class WithoutArgsArgsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithoutArgsArgsTupleScheme getScheme() {
        return new WithoutArgsArgsTupleScheme();
      }
    }

    private static class WithoutArgsArgsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<WithoutArgsArgs> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WithoutArgsArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WithoutArgsArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class WithoutArgsResult
      implements org.apache.thrift.TBase<WithoutArgsResult, WithoutArgsResult.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<WithoutArgsResult> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("withoutArgs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new WithoutArgsResultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new WithoutArgsResultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      tmpMap.put(
          Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          WithoutArgsResult.class, metaDataMap);
    }

    public WithoutArgsResult() {}

    public WithoutArgsResult(java.lang.String success) {
      this();
      this.success = success;
    }

    /** Performs a deep copy on <i>other</i>. */
    public WithoutArgsResult(WithoutArgsResult other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public WithoutArgsResult deepCopy() {
      return new WithoutArgsResult(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public WithoutArgsResult setSuccess(
        @org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.String) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof WithoutArgsResult) {
        return this.equals((WithoutArgsResult) that);
      }
      return false;
    }

    public boolean equals(WithoutArgsResult that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      boolean thisPresentSuccess = true && this.isSetSuccess();
      boolean thatPresentSuccess = true && that.isSetSuccess();
      if (thisPresentSuccess || thatPresentSuccess) {
        if (!(thisPresentSuccess && thatPresentSuccess)) {
          return false;
        }
        if (!this.success.equals(that.success)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess()) {
        hashCode = hashCode * 8191 + success.hashCode();
      }

      return hashCode;
    }

    @Override
    public int compareTo(WithoutArgsResult other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("withoutArgs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WithoutArgsResultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithoutArgsResultStandardScheme getScheme() {
        return new WithoutArgsResultStandardScheme();
      }
    }

    private static class WithoutArgsResultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<WithoutArgsResult> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, WithoutArgsResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, WithoutArgsResult struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class WithoutArgsResultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithoutArgsResultTupleScheme getScheme() {
        return new WithoutArgsResultTupleScheme();
      }
    }

    private static class WithoutArgsResultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<WithoutArgsResult> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WithoutArgsResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WithoutArgsResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class WithErrorArgs
      implements org.apache.thrift.TBase<WithErrorArgs, WithErrorArgs.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<WithErrorArgs> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("withError_args");

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new WithErrorArgsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new WithErrorArgsTupleSchemeFactory();

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          WithErrorArgs.class, metaDataMap);
    }

    public WithErrorArgs() {}

    /** Performs a deep copy on <i>other</i>. */
    public WithErrorArgs(WithErrorArgs other) {}

    @Override
    public WithErrorArgs deepCopy() {
      return new WithErrorArgs(this);
    }

    @Override
    public void clear() {}

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {}

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof WithErrorArgs) {
        return this.equals((WithErrorArgs) that);
      }
      return false;
    }

    public boolean equals(WithErrorArgs that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(WithErrorArgs other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("withError_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WithErrorArgsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithErrorArgsStandardScheme getScheme() {
        return new WithErrorArgsStandardScheme();
      }
    }

    private static class WithErrorArgsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<WithErrorArgs> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, WithErrorArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, WithErrorArgs struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class WithErrorArgsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithErrorArgsTupleScheme getScheme() {
        return new WithErrorArgsTupleScheme();
      }
    }

    private static class WithErrorArgsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<WithErrorArgs> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WithErrorArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WithErrorArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class WithErrorResult
      implements org.apache.thrift.TBase<WithErrorResult, WithErrorResult.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<WithErrorResult> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("withError_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new WithErrorResultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new WithErrorResultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      tmpMap.put(
          Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          WithErrorResult.class, metaDataMap);
    }

    public WithErrorResult() {}

    public WithErrorResult(java.lang.String success) {
      this();
      this.success = success;
    }

    /** Performs a deep copy on <i>other</i>. */
    public WithErrorResult(WithErrorResult other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public WithErrorResult deepCopy() {
      return new WithErrorResult(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public WithErrorResult setSuccess(
        @org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.String) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof WithErrorResult) {
        return this.equals((WithErrorResult) that);
      }
      return false;
    }

    public boolean equals(WithErrorResult that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      boolean thisPresentSuccess = true && this.isSetSuccess();
      boolean thatPresentSuccess = true && that.isSetSuccess();
      if (thisPresentSuccess || thatPresentSuccess) {
        if (!(thisPresentSuccess && thatPresentSuccess)) {
          return false;
        }
        if (!this.success.equals(that.success)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess()) {
        hashCode = hashCode * 8191 + success.hashCode();
      }

      return hashCode;
    }

    @Override
    public int compareTo(WithErrorResult other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("withError_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WithErrorResultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithErrorResultStandardScheme getScheme() {
        return new WithErrorResultStandardScheme();
      }
    }

    private static class WithErrorResultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<WithErrorResult> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, WithErrorResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, WithErrorResult struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class WithErrorResultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithErrorResultTupleScheme getScheme() {
        return new WithErrorResultTupleScheme();
      }
    }

    private static class WithErrorResultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<WithErrorResult> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WithErrorResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WithErrorResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class WithCollisioinArgs
      implements org.apache.thrift.TBase<WithCollisioinArgs, WithCollisioinArgs.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<WithCollisioinArgs> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("withCollisioin_args");

    private static final org.apache.thrift.protocol.TField INPUT_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "input", org.apache.thrift.protocol.TType.STRING, (short) 3333);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new WithCollisioinArgsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new WithCollisioinArgsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String input; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT((short) 3333, "input");

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3333: // INPUT
            return INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      tmpMap.put(
          Fields.INPUT,
          new org.apache.thrift.meta_data.FieldMetaData(
              "input",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          WithCollisioinArgs.class, metaDataMap);
    }

    public WithCollisioinArgs() {}

    public WithCollisioinArgs(java.lang.String input) {
      this();
      this.input = input;
    }

    /** Performs a deep copy on <i>other</i>. */
    public WithCollisioinArgs(WithCollisioinArgs other) {
      if (other.isSetInput()) {
        this.input = other.input;
      }
    }

    @Override
    public WithCollisioinArgs deepCopy() {
      return new WithCollisioinArgs(this);
    }

    @Override
    public void clear() {
      this.input = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInput() {
      return this.input;
    }

    public WithCollisioinArgs setInput(
        @org.apache.thrift.annotation.Nullable java.lang.String input) {
      this.input = input;
      return this;
    }

    public void unsetInput() {
      this.input = null;
    }

    /** Returns true if field input is set (has been assigned a value) and false otherwise */
    public boolean isSetInput() {
      return this.input != null;
    }

    public void setInputIsSet(boolean value) {
      if (!value) {
        this.input = null;
      }
    }

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case INPUT:
          if (value == null) {
            unsetInput();
          } else {
            setInput((java.lang.String) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      switch (field) {
        case INPUT:
          return getInput();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case INPUT:
          return isSetInput();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof WithCollisioinArgs) {
        return this.equals((WithCollisioinArgs) that);
      }
      return false;
    }

    public boolean equals(WithCollisioinArgs that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      boolean thisPresentInput = true && this.isSetInput();
      boolean thatPresentInput = true && that.isSetInput();
      if (thisPresentInput || thatPresentInput) {
        if (!(thisPresentInput && thatPresentInput)) {
          return false;
        }
        if (!this.input.equals(that.input)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInput()) ? 131071 : 524287);
      if (isSetInput()) {
        hashCode = hashCode * 8191 + input.hashCode();
      }

      return hashCode;
    }

    @Override
    public int compareTo(WithCollisioinArgs other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetInput(), other.isSetInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input, other.input);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("withCollisioin_args(");
      boolean first = true;

      sb.append("input:");
      if (this.input == null) {
        sb.append("null");
      } else {
        sb.append(this.input);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WithCollisioinArgsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithCollisioinArgsStandardScheme getScheme() {
        return new WithCollisioinArgsStandardScheme();
      }
    }

    private static class WithCollisioinArgsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<WithCollisioinArgs> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, WithCollisioinArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 3333: // INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.input = iprot.readString();
                struct.setInputIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, WithCollisioinArgs struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.input != null) {
          oprot.writeFieldBegin(INPUT_FIELD_DESC);
          oprot.writeString(struct.input);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class WithCollisioinArgsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithCollisioinArgsTupleScheme getScheme() {
        return new WithCollisioinArgsTupleScheme();
      }
    }

    private static class WithCollisioinArgsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<WithCollisioinArgs> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WithCollisioinArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInput()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInput()) {
          oprot.writeString(struct.input);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WithCollisioinArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.input = iprot.readString();
          struct.setInputIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class WithCollisioinResult
      implements org.apache.thrift.TBase<WithCollisioinResult, WithCollisioinResult.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<WithCollisioinResult> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("withCollisioin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new WithCollisioinResultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new WithCollisioinResultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      tmpMap.put(
          Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          WithCollisioinResult.class, metaDataMap);
    }

    public WithCollisioinResult() {}

    public WithCollisioinResult(java.lang.String success) {
      this();
      this.success = success;
    }

    /** Performs a deep copy on <i>other</i>. */
    public WithCollisioinResult(WithCollisioinResult other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public WithCollisioinResult deepCopy() {
      return new WithCollisioinResult(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public WithCollisioinResult setSuccess(
        @org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.String) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof WithCollisioinResult) {
        return this.equals((WithCollisioinResult) that);
      }
      return false;
    }

    public boolean equals(WithCollisioinResult that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      boolean thisPresentSuccess = true && this.isSetSuccess();
      boolean thatPresentSuccess = true && that.isSetSuccess();
      if (thisPresentSuccess || thatPresentSuccess) {
        if (!(thisPresentSuccess && thatPresentSuccess)) {
          return false;
        }
        if (!this.success.equals(that.success)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess()) {
        hashCode = hashCode * 8191 + success.hashCode();
      }

      return hashCode;
    }

    @Override
    public int compareTo(WithCollisioinResult other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("withCollisioin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WithCollisioinResultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithCollisioinResultStandardScheme getScheme() {
        return new WithCollisioinResultStandardScheme();
      }
    }

    private static class WithCollisioinResultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<WithCollisioinResult> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, WithCollisioinResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, WithCollisioinResult struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class WithCollisioinResultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public WithCollisioinResultTupleScheme getScheme() {
        return new WithCollisioinResultTupleScheme();
      }
    }

    private static class WithCollisioinResultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<WithCollisioinResult> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WithCollisioinResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WithCollisioinResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class OneWayArgs
      implements org.apache.thrift.TBase<OneWayArgs, OneWayArgs.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<OneWayArgs> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("oneWay_args");

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new OneWayArgsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new OneWayArgsTupleSchemeFactory();

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OneWayArgs.class, metaDataMap);
    }

    public OneWayArgs() {}

    /** Performs a deep copy on <i>other</i>. */
    public OneWayArgs(OneWayArgs other) {}

    @Override
    public OneWayArgs deepCopy() {
      return new OneWayArgs(this);
    }

    @Override
    public void clear() {}

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {}

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof OneWayArgs) {
        return this.equals((OneWayArgs) that);
      }
      return false;
    }

    public boolean equals(OneWayArgs that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(OneWayArgs other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("oneWay_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class OneWayArgsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public OneWayArgsStandardScheme getScheme() {
        return new OneWayArgsStandardScheme();
      }
    }

    private static class OneWayArgsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<OneWayArgs> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, OneWayArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, OneWayArgs struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class OneWayArgsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public OneWayArgsTupleScheme getScheme() {
        return new OneWayArgsTupleScheme();
      }
    }

    private static class OneWayArgsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<OneWayArgs> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, OneWayArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, OneWayArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class OneWayWithErrorArgs
      implements org.apache.thrift.TBase<OneWayWithErrorArgs, OneWayWithErrorArgs.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<OneWayWithErrorArgs> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("oneWayWithError_args");

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new OneWayWithErrorArgsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new OneWayWithErrorArgsTupleSchemeFactory();

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          OneWayWithErrorArgs.class, metaDataMap);
    }

    public OneWayWithErrorArgs() {}

    /** Performs a deep copy on <i>other</i>. */
    public OneWayWithErrorArgs(OneWayWithErrorArgs other) {}

    @Override
    public OneWayWithErrorArgs deepCopy() {
      return new OneWayWithErrorArgs(this);
    }

    @Override
    public void clear() {}

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {}

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof OneWayWithErrorArgs) {
        return this.equals((OneWayWithErrorArgs) that);
      }
      return false;
    }

    public boolean equals(OneWayWithErrorArgs that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(OneWayWithErrorArgs other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("oneWayWithError_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class OneWayWithErrorArgsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public OneWayWithErrorArgsStandardScheme getScheme() {
        return new OneWayWithErrorArgsStandardScheme();
      }
    }

    private static class OneWayWithErrorArgsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<OneWayWithErrorArgs> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, OneWayWithErrorArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, OneWayWithErrorArgs struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class OneWayWithErrorArgsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public OneWayWithErrorArgsTupleScheme getScheme() {
        return new OneWayWithErrorArgsTupleScheme();
      }
    }

    private static class OneWayWithErrorArgsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<OneWayWithErrorArgs> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, OneWayWithErrorArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, OneWayWithErrorArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class DataArgs
      implements org.apache.thrift.TBase<DataArgs, DataArgs.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<DataArgs> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("data_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "user", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "account", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new DataArgsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new DataArgsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable User user; // required
    public @org.apache.thrift.annotation.Nullable Account account; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short) 1, "user"),
      ACCOUNT((short) 2, "account");

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // USER
            return USER;
          case 2: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      tmpMap.put(
          Fields.USER,
          new org.apache.thrift.meta_data.FieldMetaData(
              "user",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT, User.class)));
      tmpMap.put(
          Fields.ACCOUNT,
          new org.apache.thrift.meta_data.FieldMetaData(
              "account",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT, Account.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataArgs.class, metaDataMap);
    }

    public DataArgs() {}

    public DataArgs(User user, Account account) {
      this();
      this.user = user;
      this.account = account;
    }

    /** Performs a deep copy on <i>other</i>. */
    public DataArgs(DataArgs other) {
      if (other.isSetUser()) {
        this.user = new User(other.user);
      }
      if (other.isSetAccount()) {
        this.account = new Account(other.account);
      }
    }

    @Override
    public DataArgs deepCopy() {
      return new DataArgs(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.account = null;
    }

    @org.apache.thrift.annotation.Nullable
    public User getUser() {
      return this.user;
    }

    public DataArgs setUser(@org.apache.thrift.annotation.Nullable User user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Account getAccount() {
      return this.account;
    }

    public DataArgs setAccount(@org.apache.thrift.annotation.Nullable Account account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((User) value);
          }
          break;

        case ACCOUNT:
          if (value == null) {
            unsetAccount();
          } else {
            setAccount((Account) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      switch (field) {
        case USER:
          return getUser();

        case ACCOUNT:
          return getAccount();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case USER:
          return isSetUser();
        case ACCOUNT:
          return isSetAccount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof DataArgs) {
        return this.equals((DataArgs) that);
      }
      return false;
    }

    public boolean equals(DataArgs that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      boolean thisPresentUser = true && this.isSetUser();
      boolean thatPresentUser = true && that.isSetUser();
      if (thisPresentUser || thatPresentUser) {
        if (!(thisPresentUser && thatPresentUser)) {
          return false;
        }
        if (!this.user.equals(that.user)) {
          return false;
        }
      }

      boolean thisPresentAccount = true && this.isSetAccount();
      boolean thatPresentAccount = true && that.isSetAccount();
      if (thisPresentAccount || thatPresentAccount) {
        if (!(thisPresentAccount && thatPresentAccount)) {
          return false;
        }
        if (!this.account.equals(that.account)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser()) {
        hashCode = hashCode * 8191 + user.hashCode();
      }

      hashCode = hashCode * 8191 + ((isSetAccount()) ? 131071 : 524287);
      if (isSetAccount()) {
        hashCode = hashCode * 8191 + account.hashCode();
      }

      return hashCode;
    }

    @Override
    public int compareTo(DataArgs other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetAccount(), other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("data_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) {
        sb.append(", ");
      }
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
      if (account != null) {
        account.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DataArgsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DataArgsStandardScheme getScheme() {
        return new DataArgsStandardScheme();
      }
    }

    private static class DataArgsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<DataArgs> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, DataArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new User();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.account = new Account();
                struct.account.read(iprot);
                struct.setAccountIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, DataArgs struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          struct.account.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class DataArgsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DataArgsTupleScheme getScheme() {
        return new DataArgsTupleScheme();
      }
    }

    private static class DataArgsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<DataArgs> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DataArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetAccount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
        if (struct.isSetAccount()) {
          struct.account.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DataArgs struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user = new User();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.account = new Account();
          struct.account.read(iprot);
          struct.setAccountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class DataResult
      implements org.apache.thrift.TBase<DataResult, DataResult.Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<DataResult> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("data_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new DataResultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new DataResultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable UserAccount success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, Fields> byName =
          new java.util.HashMap<java.lang.String, Fields>();

      static {
        for (Fields field : java.util.EnumSet.allOf(Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static Fields findByThriftIdOrThrow(int fieldId) {
        Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short thriftId;
      private final java.lang.String fieldName;

      Fields(short thriftId, java.lang.String fieldName) {
        this.thriftId = thriftId;
        this.fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<Fields, org.apache.thrift.meta_data.FieldMetaData>(Fields.class);
      tmpMap.put(
          Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT, UserAccount.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataResult.class, metaDataMap);
    }

    public DataResult() {}

    public DataResult(UserAccount success) {
      this();
      this.success = success;
    }

    /** Performs a deep copy on <i>other</i>. */
    public DataResult(DataResult other) {
      if (other.isSetSuccess()) {
        this.success = new UserAccount(other.success);
      }
    }

    @Override
    public DataResult deepCopy() {
      return new DataResult(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public UserAccount getSuccess() {
      return this.success;
    }

    public DataResult setSuccess(@org.apache.thrift.annotation.Nullable UserAccount success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(
        Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((UserAccount) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    @Override
    public boolean isSet(Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof DataResult) {
        return this.equals((DataResult) that);
      }
      return false;
    }

    public boolean equals(DataResult that) {
      if (that == null) {
        return false;
      }
      if (this == that) {
        return true;
      }

      boolean thisPresentSuccess = true && this.isSetSuccess();
      boolean thatPresentSuccess = true && that.isSetSuccess();
      if (thisPresentSuccess || thatPresentSuccess) {
        if (!(thisPresentSuccess && thatPresentSuccess)) {
          return false;
        }
        if (!this.success.equals(that.success)) {
          return false;
        }
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess()) {
        hashCode = hashCode * 8191 + success.hashCode();
      }

      return hashCode;
    }

    @Override
    public int compareTo(DataResult other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Fields fieldForId(int fieldId) {
      return Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("data_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DataResultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DataResultStandardScheme getScheme() {
        return new DataResultStandardScheme();
      }
    }

    private static class DataResultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<DataResult> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, DataResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserAccount();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, DataResult struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class DataResultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DataResultTupleScheme getScheme() {
        return new DataResultTupleScheme();
      }
    }

    private static class DataResultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<DataResult> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DataResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DataResult struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserAccount();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }
}
