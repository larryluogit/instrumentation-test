group 'io.opentelemetry.example'
version '1.0-SNAPSHOT'

apply plugin: "java"

ext {
  versions = [
    opentelemetry              : "1.2.0",
    opentelemetryAlpha         : "1.2.0-alpha",
    opentelemetryJavaagent     : "1.3.0-SNAPSHOT",
    opentelemetryJavaagentAlpha: "1.3.0-alpha-SNAPSHOT",
  ]

  deps = [
    autoservice: dependencies.create(group: 'com.google.auto.service', name: 'auto-service', version: '1.0')
  ]
}

repositories {
  mavenCentral()
  maven {
    url = uri("https://oss.sonatype.org/content/repositories/snapshots")
  }
}

configurations {
  /*
  We create a separate gradle configuration to grab a published Otel instrumentation agent.
  We don't need the agent during development of this extension module.
  This agent is used only during integration test.
  */
  otel
}

dependencies {
  /*
  Interfaces and SPIs that we implement. We use `compileOnly` dependency because during
  runtime all neccessary classes are provided by javaagent itself.
   */
  compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:${versions.opentelemetryAlpha}")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-api:${versions.opentelemetryJavaagentAlpha}")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")

  //Provides @AutoService annotation that makes registration of our SPI implementations much easier
  compileOnly deps.autoservice
  annotationProcessor deps.autoservice

  /*
   Used by our instrumentation module to references classes of the target instrumented library.
   We again use `compileOnly` here because during runtime these classes are provided by the
   actual application that we instrument.
   */
  compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'

  testImplementation("org.testcontainers:testcontainers:1.15.2")
  testImplementation("com.fasterxml.jackson.core:jackson-databind:2.11.2")
  testImplementation("com.google.protobuf:protobuf-java-util:3.12.4")
  testImplementation("com.squareup.okhttp3:okhttp:3.12.12")
  testImplementation("io.opentelemetry:opentelemetry-api:${versions.opentelemetry}")
  testImplementation("io.opentelemetry:opentelemetry-proto:${versions.opentelemetryAlpha}")

  testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.2")
  testRuntimeOnly("ch.qos.logback:logback-classic:1.2.3")

  //Otel Java instrumentation that we use and extend during integration tests
  otel("io.opentelemetry.javaagent:opentelemetry-javaagent:${versions.opentelemetryJavaagent}:all")
}

tasks {
  test {
    useJUnitPlatform()

    def jar = tasks.jar
    inputs.files(layout.files(jar))

    doFirst {
      //To run our application with javaagent published by OpenTelemetry Java instrumentation project
      jvmArgs("-Dio.opentelemetry.smoketest.agentPath=${configurations.getByName("otel").resolve().find().absolutePath}")
      //Instructs our integration test where to find our extension archive
      jvmArgs("-Dio.opentelemetry.smoketest.extensionPath=${jar.archiveFile.get()}")
    }
  }

  compileJava {
    options.release.set(11)
  }
}

